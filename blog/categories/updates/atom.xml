<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: updates | Computational Intelligence Library]]></title>
  <link href="http://cilib.github.com/blog/categories/updates/atom.xml" rel="self"/>
  <link href="http://cilib.github.com/"/>
  <updated>2013-01-08T10:01:22+02:00</updated>
  <id>http://cilib.github.com/</id>
  <author>
    <name><![CDATA[CIRG]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Simplified domain string grammar]]></title>
    <link href="http://cilib.github.com/blog/2012/04/17/simplified-domain-string-grammar/"/>
    <updated>2012-04-17T00:00:00+02:00</updated>
    <id>http://cilib.github.com/blog/2012/04/17/simplified-domain-string-grammar</id>
    <content type="html"><![CDATA[<h2>The need to change domain string grammar</h2>

<p>Defining a domain for use within a simulation is allowed within CIlib
as a simple string, such as:</p>

<pre><code>R(-10.0,3.0)^7,Z(0,1),B^2,R(0.0,5.0)
</code></pre>

<p>The notation is simple enough, but it is unfortunately difficult to work with
because the ',' token is overloaded to be both a separator for individual
dimensions within the domain definitions as well as being the separator for
lower and upper bound definitions within the dimension as well.</p>

<!-- more -->


<p>In order to parse the above, a fair amount of state needs to be maintained
to know the current "scope". This mutable state results is utter havoc with
concurrent usage of the domain parser. Two possible fixes could be applied to
resolve this issue:</p>

<ol>
<li>Re-create the parser each time, ensuring that each thread has its own
instance.</li>
<li>Make the parser stateless.</li>
</ol>


<p>Option (1) seems reasonable but has a massive amount of effort for very little
gain, whereas option (2) means that the parser can not only be reused, but that
the concurrency issues should just disappear because no state is mangled.</p>

<p>As a result, we have reimplemented the parser to be as stateless as possible.
There is still some state within the parboiled parser library code that we
have made peace with.</p>

<h2>What has changed</h2>

<p>The new parser now has two phases: (1) expansion and (2) transformation. The
expansion process is responsible to convert "exponent" strings into simpler
forms. As an example:</p>

<pre><code>R^7 =&gt; R,R,R,R,R,R,R
</code></pre>

<p>The transformation phase then converts the declared types into actual instances
that may be used within the algorithm. In order to differentiate the bounds
and dimension elements, the upper and lower bounds separator has been changed
from a ',' (comma) to a ':' (colon).</p>

<p>The new domain string is then:</p>

<pre><code>R(-10.0:3.0)^7,Z(0:1),B^2,R(0.0:5.0)
</code></pre>

<p>This is a minor change to the domain string representation, but the benefits
we have gained through this little modification are far too large to pass up.
To allow for the user to update the XML simulation specifications, clearer
error messages have been created with the simulation refusing to execute
without an updated domain string.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Recent changes in master]]></title>
    <link href="http://cilib.github.com/blog/2012/04/12/recent-changes-in-master/"/>
    <updated>2012-04-12T00:00:00+02:00</updated>
    <id>http://cilib.github.com/blog/2012/04/12/recent-changes-in-master</id>
    <content type="html"><![CDATA[<p>A couple of patches recently made their way into the master branch of CIlib which
affect the way CIlib is used. The changes were made to the stopping conditions,
topologies and control parameters.</p>

<!-- more -->


<h3>Stopping Conditions</h3>

<p>In a bid to increase genericity (is that a word?) and remove duplicate code the
stopping conditions package was revamped. The new stopping condition classes are as
follows:</p>

<ul>
<li><p>MeasuredStoppingCondition which takes in a measurment an Objective and a target
The measurement is taken from the measurement package, objective can be either
Maximum or Minimum and target is the value the measurement must exceed (above
for Maximum, below for Minimum) for the algorithm to terminate.</p></li>
<li><p>MaintatinedStoppingCondition whcih takes in another StoppingCondition and the
number of consecutive iterations for which the condition must hold before the
algorithm can terminate.</p></li>
</ul>


<p>Here are a few examples showing the differences from the before and after the
changes.</p>

<h4>Before</h4>

<p>Java:</p>

<pre><code>StoppingCondition sc = new MaximumIterations(2000);

StoppingCondition sc = new MinimumDiversity();
sc.setMinimumDiversity(ConstantControlParameter.of(0.01));
sc.setConsecutiveIterations(ConstantControlParameter.of(20));
</code></pre>

<p>XML:</p>

<pre><code>&lt;addStoppingCondition class="stoppingcondition.MaximumIterations" maximumIterations="2000"/&gt;

&lt;addStoppingCondition class="stoppingcondition.MinimumDiversity"&gt;
    &lt;minimumDiversity class="controlparameter.ConstantControlParameter" parameter="0.01"/&gt;
    &lt;consecutiveIterations class="controlparameter.ConstantControlParameter" parameter="20"/&gt;
&lt;/addStoppingCondition&gt;
</code></pre>

<h4>After</h4>

<p>Java:</p>

<pre><code>StoppingCondition sc = new MeasuredStoppingCondition(new Iterations(), new Maximum(), 2000);

StoppingCondition sc = new MaintainedStoppingCondition(new MeasuredStoppingCondition(new Diversity(), new Minimum(), 0.01), 20);
</code></pre>

<p>XML:</p>

<pre><code>&lt;addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="2000"&gt;
    &lt;measurement class="measurement.generic.Iterations"/&gt;
    &lt;objective class="stoppingcondition.Maximum/&gt;"
&lt;/addStoppingCondition&gt;

&lt;addStoppingCondition class="stoppingcondition.MaintainedStoppingCondition" consecutiveIterations="20"&gt;
    &lt;condition class="stoppingcondition.MeasuredStoppingCondition" target="0.01"&gt;
        &lt;measurement class="measurement.single.diversity.Diversity"/&gt;
        &lt;objective class="stoppingcondition.Minimum/&gt;"
    &lt;/condition&gt;
&lt;/addStoppingCondition&gt;
</code></pre>

<h3>Topologies</h3>

<p>The main difference regarding topologies is how to get the best entity/entities.
The getBestEntity method has been removed from the Topology classes and has been
placed in the Topologies class as a static method along with a number of other
methods. This was done to prevent overcrowding the topology interface and to
separate concerns since a topology is only suppose to impose a structure on a
population of entities.</p>

<h4>Before</h4>

<pre><code>Particle currentBest = topology.getBestEntity();
Particle gBest = topology.getBestEntity(new SocialBestFitnessComparator());

Particle nBest = particle.getNeighbourhoodBest();
// Although to the nBest could have changed so a more accurate way would be
// to iterate through the neighbourhood of the particle and compare each one
</code></pre>

<h4>After</h4>

<pre><code>Particle currentBest = Topologies.getBestEntity(topology);
Particle gBest = Topologies.getBestEntity(topology, new SocialBestFitnessComparator());

Particle currentNBest = Topologies.getNeighbourhoodBest(topology, particle);
Particle nBest = Topologies.getNeighbourhoodBest(topology, particle, new SocialBestFitnessComparator());
</code></pre>

<h3>Control Parameters</h3>

<p>Before, using control parameters that could change (e.g. linear increasing/decreasing
parameters) meant that the user had to update the parameters every iteration.
This became a hassle if a control parameter was introduced into code that already
had a big inheritance structure since a mechanism for updating the control parameters
would have to be introduced into each of those classes.</p>

<p>The changes made allow a control parameter to automatically update its value when
the getParameter method is called. One implication of this is that parameters cant
be updated only once per iteration. This is a problem for algorithms that use multiple
stopping conditions or whose stopping conditions dont include maximum iterations
(ControlParameters updateon percentage completion of an algorith which is determined
by the stopping conditions). This problem is dealt with by introducing a new
ControlParameter: UpdateOnIterationControlParameter which takes in a delegate
control parameter and updates it at the end of each iteration.</p>

<p>Additionally, some parameters were merged to avoid duplicating code and control
parameters are only bounded if used with BoundedControlParameter (which is a class
now, not an interface).</p>

<h4>Before</h4>

<p>Java:</p>

<pre><code>// Only updated at the end of an iteration or when updateParameter was called
LinearIncreasingControlParameter cp = new LinearIncreasingControlParameter();
cp.setUpperBound(0.9);
cp.setLowerBound(0.4);
cp.setParameter(0.4);

LinearDecreasingControlParameter cp = new LinearDecreasingControlParameter();
cp.setUpperBound(0.9);
cp.setLowerBound(0.4);
cp.setParameter(0.9);
</code></pre>

<p>XML:</p>

<pre><code>&lt;inertiaWeight class="controlparameter.LinearIncreasingControlParameter"&gt;
    &lt;upperBound value="0.9"/&gt;
    &lt;lowerBound value="0.4"/&gt;
    &lt;parameter value="0.4"/&gt;
&lt;/inertiaWeight&gt;

&lt;inertiaWeight class="controlparameter.LinearDecreasingControlParameter"&gt;
    &lt;upperBound value="0.9"/&gt;
    &lt;lowerBound value="0.4"/&gt;
    &lt;parameter value="0.9"/&gt;
&lt;/inertiaWeight&gt;
</code></pre>

<h4>After</h4>

<p>Java:</p>

<pre><code>// Updates whenever it is called
LinearlyVaryingControlParameter cp = new LinearlyVaryingControlParameter();
cp.setInitialValue(0.4);
cp.setFinalValue(0.9);

LinearlyVaryingControlParameter cp = new LinearlyVaryingControlParameter();
cp.setInitialValue(0.9);
cp.setFinalValue(0.4);

// Will update otherCP at the end of an iteration
UpdateOnIterationControlParameter cp = new UpdateOnIterationControlParameter();
cp.setDelegate(otherCP);

// Will always keep otherCP within bounds
BoundedControlParameter cp = new BoundedControlParameter();
cp.setBounds(new Bounds(-1, 1));
cp.setDelegate(otherCP);
</code></pre>

<p>XML:</p>

<pre><code>&lt;inertiaWeight class="controlparameter.LinearlyVaryingControlParameter" initialValue="0.4" finalValue="0.9"/&gt;

&lt;inertiaWeight class="controlparameter.LinearlyVaryingControlParameter" initialValue="0.9" finalValue="0.4"/&gt;

&lt;inertiaWeight class="controlparameter.UpdateOnIterationControlParameter"&gt;
    &lt;delegate class="controlparameter.LinearlyVaryingControlParameter" initialValue="0.9" finalValue="0.4"/&gt;
&lt;/inertiaWeight&gt;
</code></pre>

<p>If there are any questions join us on <a href="http://webchat.freenode.net/?channels=cilib">irc chat</a>.</p>
]]></content>
  </entry>
  
</feed>
